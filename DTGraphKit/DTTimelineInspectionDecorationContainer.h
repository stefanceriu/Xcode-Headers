//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 16 2018 08:38:15).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class DTTimelineDecoratedPlane, XRIntKeyedDictionary;

@interface DTTimelineInspectionDecorationContainer : NSObject
{
    struct map<XRTimeRange, DTTimelineInspectionDecoration *, std::__1::less<XRTimeRange>, std::__1::allocator<std::__1::pair<const XRTimeRange, DTTimelineInspectionDecoration *>>> _decorationsByTimeRange;
    BOOL _pleaseCancel;
    XRIntKeyedDictionary *_associatedObjects;
    DTTimelineDecoratedPlane *_plane;
}

@property(nonatomic) __weak DTTimelineDecoratedPlane *plane; // @synthesize plane=_plane;
@property(retain, nonatomic) XRIntKeyedDictionary *associatedObjects; // @synthesize associatedObjects=_associatedObjects;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)cancel;
- (id)decorationAtTime:(unsigned long long)arg1;
- (id)objectForLabel:(unsigned long long)arg1;
-     // Error parsing type: v24@0:8^{DTTimelineDecorationContainer=BB{atomic<bool>=AB}Q{deque<XRTimeRange, std::__1::allocator<XRTimeRange> >={__split_buffer<XRTimeRange *, std::__1::allocator<XRTimeRange *> >=^^{XRTimeRange}^^{XRTimeRange}^^{XRTimeRange}{__compressed_pair<XRTimeRange **, std::__1::allocator<XRTimeRange *> >=^^{XRTimeRange}}}Q{__compressed_pair<unsigned long, std::__1::allocator<XRTimeRange> >=Q}}{XRTimeRange=QQ}{DecorationContainer=BB{TileMetrics={XRTimeRange=QQ}{PlaneMetrics={DynamicRange=qq}{ViewMetrics=QddQQQ{XRTimeRange=QQ}{shared_ptr<const std::__1::unordered_map<int, CGRect, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, CGRect> > > >=^{unordered_map<int, CGRect, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, CGRect> > >}^{__shared_weak_count}}dddc}d{DrawablesSettings=@@d@@{CGSize=dd}{?=QQQ}{?=QQQdQd}}ccc@id}}{StringIslandSet={map<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland>, std::__1::less<DTTimelineInternal::Span>, std::__1::allocator<std::__1::pair<const DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland> > > >={__tree<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland> >, std::__1::__map_value_compare<DTTimelineInternal::Span, std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland> >, std::__1::less<DTTimelineInternal::Span>, true>, std::__1::allocator<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<DTTimelineInternal::Span, std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointStringIsland> >, std::__1::less<DTTimelineInternal::Span>, true> >=Q}}}^{TileMetrics}{WingMetrics=ddd}d}{PointIslandSet={map<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland>, std::__1::less<DTTimelineInternal::Span>, std::__1::allocator<std::__1::pair<const DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland> > > >={__tree<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland> >, std::__1::__map_value_compare<DTTimelineInternal::Span, std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland> >, std::__1::less<DTTimelineInternal::Span>, true>, std::__1::allocator<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<DTTimelineInternal::Span, std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::PointIsland> >, std::__1::less<DTTimelineInternal::Span>, true> >=Q}}}^{TileMetrics}{WingMetrics=ddd}}{IntervalIslandSet={map<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland>, std::__1::less<DTTimelineInternal::Span>, std::__1::allocator<std::__1::pair<const DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland> > > >={__tree<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland> >, std::__1::__map_value_compare<DTTimelineInternal::Span, std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland> >, std::__1::less<DTTimelineInternal::Span>, true>, std::__1::allocator<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<DTTimelineInternal::Span, std::__1::__value_type<DTTimelineInternal::Span, std::__1::shared_ptr<DTTimelineInternal::IntervalIsland> >, std::__1::less<DTTimelineInternal::Span>, true> >=Q}}}^{TileMetrics}{WingMetrics=ddd}}}{Adder=^{DecorationContainer}BB{CursorState={XRTimeRange=QQ}iiBQqQC}}{unique_ptr<DTTimelineDecorationEnumerator, std::__1::default_delete<DTTimelineDecorationEnumerator> >={__compressed_pair<DTTimelineDecorationEnumerator *, std::__1::default_delete<DTTimelineDecorationEnumerator> >=^{DTTimelineDecorationEnumerator}}}@i}16, name: addDecorationsFromContainer:
- (void)decorate:(CDUnknownBlockType)arg1;
- (id)init;

@end


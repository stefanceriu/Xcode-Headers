//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 16 2018 08:38:15).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <SceneKit/SCNRenderContextImp.h>

#import <SceneKit/SCNBufferStream-Protocol.h>

@class CAMetalLayer, MTLRenderPassDescriptor, NSMutableArray, NSMutableDictionary, NSObject, NSString, SCNMetalResourceManager, SCNMetalShaderManager;
@protocol CAMetalDrawable, MTLBlitCommandEncoder, MTLBuffer, MTLCommandBuffer, MTLCommandQueue, MTLComputeCommandEncoder, MTLDepthStencilState, MTLDevice, MTLRenderCommandEncoder, MTLRenderPipelineState, MTLSamplerState, MTLTexture, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface SCNRenderContextMetal : SCNRenderContextImp <SCNBufferStream>
{
    SCNMetalResourceManager *_resourceManager;
    id <MTLDevice> _device;
    BOOL _isValidationEnabled;
    int _profile;
    unsigned int _features;
    struct __C3DEngineContext *_engineContext;
    unsigned int _wantsWideGamut:1;
    unsigned int _isOpaque:1;
    unsigned int _disableLinearRendering:1;
    unsigned int _useFunctionConstants:1;
    id <MTLCommandQueue> _commandQueue;
    NSObject<OS_dispatch_semaphore> *_inFlightSemaphore;
    // Error parsing type: {atomic<int>="__a_"Ai}, name: _pendingGPUFrameCount
    id <MTLTexture> _textureTarget;
    CAMetalLayer *_layerTarget;
    id <CAMetalDrawable> _drawable;
    MTLRenderPassDescriptor *_currentRenderPassDescriptor;
    // Error parsing type: , name: _renderSize
    SCNMetalShaderManager *_currentShaderManager;
    id <MTLCommandBuffer> _currentCommandBuffer;
    // Error parsing type: {SCNMTLRenderCommandEncoder="_winding"Q"_cullMode"Q"_fillMode"Q"_clipMode"Q"_blendColor""_lockCullMode"B"_lockFillMode"B"_vertexBuffers"[31{?="buffer"@"<MTLBuffer>""offset"Q}]"_vertexTextures"[128@"<MTLTexture>"]"_vertexSamplers"[16@"<MTLSamplerState>"]"_fragmentBuffers"[31{?="buffer"@"<MTLBuffer>""offset"Q}]"_fragmentTextures"[128@"<MTLTexture>"]"_fragmentSamplers"[16@"<MTLSamplerState>"]"_renderPipelineState"@"<MTLRenderPipelineState>""_commandBuffer"@"<MTLCommandBuffer>""_encoder"@"<MTLRenderCommandEncoder>""_bufferPool"^{SCNMTLBufferPool}"_vertexTexturesToBind"t"_fragmentTexturesToBind"t}, name: _renderEncoder
    id <MTLCommandBuffer> _currentComputeCommandBuffer;
    id <MTLComputeCommandEncoder> _currentComputeEncoder;
    id <MTLCommandBuffer> _currentBlitCommandBuffer;
    id <MTLBlitCommandEncoder> _currentBlitEncoder;
    // Error parsing type: ^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}, name: _currentPass
    BOOL _currentPassIsMirrored;
    NSMutableArray *_renderPasses;
    CDStruct_21854d8c _currentStreamBufferIndices;
    struct SCNMTLBufferPool *_volatileBufferPools[3];
    struct SCNMTLBufferPool *_frameVolatileBufferPool;
    NSMutableArray *_volatileMeshes;
    NSMutableArray *_bufferPool;
    NSMutableArray *_usedVolatileMeshElements;
    NSMutableArray *_freeVolatileMeshElements;
    struct SCNMTLBufferPool *_constantBufferPools[3];
    struct SCNMTLBufferPool *_frameConstantBufferPool;
    id <MTLDepthStencilState> _defaultDepthStencilState;
    id <MTLSamplerState> _defaultSamplerState;
    // Error parsing type: ^{__C3DFXMetalProgram={__C3DFXProgram={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}ib1b1^{__C3DFXProgramDelegate}}[2^{__CFString}]^{__CFString}^{__CFDictionary}^v^{__CFDictionary}^v^{__CFString}}, name: _background2DProgram
    // Error parsing type: ^{__C3DFXMetalProgram={__C3DFXProgram={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}ib1b1^{__C3DFXProgramDelegate}}[2^{__CFString}]^{__CFString}^{__CFDictionary}^v^{__CFDictionary}^v^{__CFString}}, name: _backgroundCubeProgram
    // Error parsing type: ^{__C3DFXMetalProgram={__C3DFXProgram={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}ib1b1^{__C3DFXProgramDelegate}}[2^{__CFString}]^{__CFString}^{__CFDictionary}^v^{__CFDictionary}^v^{__CFString}}, name: _backgroundVideoProgram
    struct __C3DRasterizerStates *_backgroundRasterizerStates;
    double _initialTime;
    NSObject<OS_dispatch_queue> *_resourceQueue;
    NSObject<OS_dispatch_group> *_resourceGroup;
    id <MTLBuffer> _shadowKernelBuffer;
    struct {
        struct __C3DFXPassInstance *passInstance;
        struct __C3DLightingSystem *lightingSystem;
        struct __C3DDynamicBatchingSystem *dynamicBatchingSystem;
        struct __C3DFXPass *pass;
        char passRequiresLighting;
        char passRequiresLastFrameTransform;
        struct __C3DTransformTree *transformTree;
    } _processingContext;
    unsigned int _seed;
    // Error parsing type: {SCNSceneBuffer="viewTransform"{float4x4="columns"[4]}"inverseViewTransform"{float4x4="columns"[4]}"projectionTransform"{float4x4="columns"[4]}"viewProjectionTransform"{float4x4="columns"[4]}"viewToCubeTransform"{float4x4="columns"[4]}"lastFrameViewProjectionTransform"{float4x4="columns"[4]}"ambientLightingColor""fogColor""fogParameters""inverseResolution""time"f"sinTime"f"cosTime"f"random01"f"motionBlurIntensity"f"environmentIntensity"f"inverseProjectionTransform"{float4x4="columns"[4]}"inverseViewProjectionTransform"{float4x4="columns"[4]}"nearFar""viewportSize"}, name: _frameUniforms
    struct {
        id <MTLBuffer> buffer;
        unsigned long long offset;
    } _sceneUniforms;
    struct {
        id <MTLBuffer> buffer;
        unsigned long long offset;
        unsigned long long size;
        id <MTLTexture> shadowMaps[256];
        id <MTLTexture> textureMaps[256];
        id <MTLSamplerState> samplerStates[256];
    } _lightsData;
    // Error parsing type: {?="modelTransform"{float4x4="columns"[4]}"lastFrameModelTransform"{float4x4="columns"[4]}"normalTransform"{float4x4="columns"[4]}"modelViewTransform"{float4x4="columns"[4]}"modelViewProjectionTransform"{float4x4="columns"[4]}"boundingBox"{float2x3="columns"[2]}"worldBoundingBox"{float2x3="columns"[2]}"instanceNode"^{__C3DNode}"flags"I"probeCacheIndex"^I"boneTransformSizeWritten"I}, name: _nodeUniforms
    struct {
        CDStruct_c6b9131d currentLightingSet;
        id <MTLTexture> currentShadowMaps[8];
        id <MTLTexture> currentGoboMaps[8];
        struct unordered_map<unsigned long long, SCNMTLLightSetData, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SCNMTLLightSetData>>> frameLightingSetDatas;
        unsigned long long currentLightingHashKey;
        struct {
            long long count;
            struct __C3DLight *lights[8];
            struct __C3DLightRuntimeData *lightsData[8];
        } currentLightingDesc;
    } _lighting;
    struct Cache _cache;
    struct {
        struct __C3DFXPass *debugLightMeshPass[7];
        struct __C3DFXPass *lightPasses[7];
        struct __C3DMesh *lightMeshes[7];
        char resourcesAreReady;
    } _deferredRendering;
    struct {
        unsigned long long pixelFormat;
        unsigned long long depthFormat;
        unsigned long long stencilFormat;
        unsigned long long sampleCount;
        id <MTLRenderPipelineState> replaceRPS;
        id <MTLRenderPipelineState> overRPS;
    } _compositeRendering;
    id <MTLRenderPipelineState> _downSamplePipelineState;
    struct {
        id <MTLTexture> backgroundTexture;
        id <MTLTexture> overlayTexture;
        id <MTLTexture> stencilTexture;
    } _skCompositing;
    struct {
        unsigned long long pixelFormat;
        unsigned long long sampleCount;
        id <MTLRenderPipelineState> displayCubemapPS;
        id <MTLRenderPipelineState> displayTexture2DPS;
        id <MTLRenderPipelineState> displayDepth2DPS;
    } _debug;
    BOOL _showsAuthoringEnvironment;
    struct {
        char collectEnabled;
        NSMutableDictionary *errors;
    } _compilationIssues;
    struct {
        id <MTLTexture> currentColors[4];
        id <MTLTexture> currentDepth;
        id <MTLTexture> currentStencil;
        id <MTLTexture> mainColors[4];
        id <MTLTexture> mainDepth;
        id <MTLTexture> outputColors[4];
        id <MTLTexture> outputDepth;
    } _renderTargets;
    struct {
        unsigned int modelTransformBindingCount;
        unsigned int modelViewTransformBindingCount;
        unsigned int normalTransformBindingCount;
        unsigned int nodeOpacityBindingCount;
    } _counters;
    MTLRenderPassDescriptor *_clientRenderPassDescriptor;
    id <MTLRenderCommandEncoder> _clientRenderCommandEncoder;
    id <MTLCommandBuffer> _clientCommandBuffer;
    unsigned long long _debugOptions;
}

+ (void)registerBindings;
- (void)setDebugOptions:(unsigned long long)arg1;
- (unsigned long long)debugOptions;
@property(retain, nonatomic) id <MTLCommandBuffer> clientCommandBuffer; // @synthesize clientCommandBuffer=_clientCommandBuffer;
@property(retain, nonatomic) id <MTLRenderCommandEncoder> clientRenderCommandEncoder; // @synthesize clientRenderCommandEncoder=_clientRenderCommandEncoder;
@property(retain, nonatomic) MTLRenderPassDescriptor *clientRenderPassDescriptor; // @synthesize clientRenderPassDescriptor=_clientRenderPassDescriptor;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)writeBytes:(void *)arg1 length:(unsigned long long)arg2;
- (void)executeRenderPasses;
- (void)addRenderPass:(id)arg1;
- (void)clearRenderPasses;
- (void)renderSKSceneWithRenderer:(id)arg1 overlay:(BOOL)arg2 atTime:(double)arg3;
- (void)superSampling:(id)arg1 into:(id)arg2;
- (void)_drawFullScreenTexture:(id)arg1 over:(BOOL)arg2;
- (void)_drawShadowMaps;
- (void)_drawPBRTextures;
- (id)currentCommandBuffer;
- (id)currentRenderPassDescriptor;
- (id)currentComputeCommandEncoder;
- (id)currentRenderCommandEncoder;
- (void)endDeferredLighting;
-     // Error parsing type: v36@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}16i24^{__C3DLightRuntimeData=If[4{?=[4]}]^v^{__C3DTextureSampler}^v^{__C3DTextureSampler}}28, name: renderLight:lightType:lightData:
- (void)beginDeferredLighting;
-     // Error parsing type: v24@0:8^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}16, name: drawFullScreenQuadForPass:
- (void)resetVolatileMeshElements;
-     // Error parsing type: v24@0:8^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}II^{__C3DMeshElement}CCC{?=c^{__CFData}I^I{?=qq}CB}fff^v^{__C3DMeshSource}[2]^{?}I}16, name: unmapVolatileMeshElement:
-     // Error parsing type: ^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}II^{__C3DMeshElement}CCC{?=c^{__CFData}I^I{?=qq}CB}fff^v^{__C3DMeshSource}[2]^{?}I}36@0:8c16q20q28, name: createVolatileMeshElementOfType:primitiveCount:bytesPerIndex:
- (void)_recycleMTLBufferToPool:(id)arg1;
- (id)_newMTLBufferFromPoolWithLength:(unsigned long long)arg1;
- (void)resetVolatileMeshes;
- (void)unmapVolatileMesh:(struct __C3DMesh *)arg1 modifiedVerticesCount:(long long)arg2;
- (BOOL)mapVolatileMesh:(struct __C3DMesh *)arg1 verticesCount:(long long)arg2;
- (void)drawWireframeOverlayForElements:(CDStruct_d65e47c4 *)arg1 range:(CDStruct_912cb5d2)arg2 store:(struct __C3DRendererElementStore *)arg3;
- (id)compilationErrors;
- (void)setCollectsCompilationErrors:(BOOL)arg1;
- (BOOL)collectsCompilationErrors;
- (void)setShowsAuthoringEnvironment:(BOOL)arg1;
- (BOOL)showsAuthoringEnvironment;
-     // Error parsing type: v32@0:8^{__C3DRendererElement=^{__C3DNode}^{__C3DGeometry}^{__C3DMesh}^v^{__C3DMaterial}^{__C3DFXTechnique}^{__C3DRendererElementProgramHashCode}{?=[8C]}iIb8b1b1b1b1b1b1b1b3b1b3}16^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}24, name: drawRenderElement:withPass:
- (void)_prepareMaterialTextures:(struct __C3DMaterial *)arg1;
- (id)renderTargetForSemantic:(int)arg1;
- (id)mainDepthTexture;
- (id)mainColorTextureForChannel:(unsigned long long)arg1;
- (void)stopProcessingRendererElements;
- (void)startProcessingRendererElementsWithEngineIterationContext:(CDStruct_256c7a3c *)arg1;
- (void)processRendererElements:(CDStruct_d65e47c4 *)arg1 count:(unsigned int)arg2 engineIterationContext:(CDStruct_256c7a3c *)arg3;
-     // Error parsing type: v148@0:8^{__C3DMesh=}16^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}II^{__C3DMeshElement}CCC{?=c^{__CFData}I^I{?=qq}CB}fff^v^{__C3DMeshSource}[2]^{?}I}24^{__C3DFXProgram={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}ib1b1^{__C3DFXProgramDelegate}}32^{__C3DEngineContext=}40(C3DMatrix4x4=[16f][4]{?=[4]})48r^{C3DColor4=(?=[4f]{?=ffff})}112^{__C3DRasterizerStates=}120^{__C3DBlendStates=}128^{__C3DImage=}136c144, name: renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:
-     // Error parsing type: v32@0:8^{__C3DImageProxy={__CFRuntimeBase=QAQ}{?=^?^?^?^?}^vC}16^{__C3DEngineContext=}24, name: renderVideoBackground:engineContext:
-     // Error parsing type: v32@0:8^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}16^{__C3DEngineContext=}24, name: renderBackground:engineContext:
- (void)_drawPatchForMeshElement:(id)arg1 instanceCount:(unsigned long long)arg2;
- (void)_drawMeshElement:(id)arg1 instanceCount:(unsigned long long)arg2;
- (void)_setMeshBuffers:(id)arg1;
- (void)popDebugGroup;
- (void)pushDebugGroup:(id)arg1;
- (void)setRasterizerStates:(struct __C3DRasterizerStates *)arg1;
- (void)_logLightingInformation;
-     // Error parsing type: @24@0:8^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}16, name: radianceTextureForEffectSlot:
-     // Error parsing type: @24@0:8^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}16, name: irradianceTextureForEffectSlot:
-     // Error parsing type: @24@0:8^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}16, name: textureForEffectSlot:
- (id)newRenderTargetWithDescription:(CDStruct_fd8065c6 *)arg1 size:(unsigned long long)arg2 arrayLength: /* Error: Ran out of types for this method. */;
- (id)currentBlitEncoder;
- (void)endRenderPass;
- (void)_clearRenderCommandEncoderCache;
- (id)_renderCommandEncoderWithDescriptor:(id)arg1;
-     // Error parsing type: v24@0:8^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}16, name: __C3DFXContextDidApplyPass:
-     // Error parsing type: c27@0:8^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}16{?=CCB}24, name: beginRenderPass:parameters:
- (void)_clearRenderCaches;
-     // Error parsing type: c40@0:8@16^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}24^{?=CCB}32, name: _setupDescriptor:forPass:parameters:
- (id)_finalRenderTexture;
- (id)_renderTargetWithDescription:(CDStruct_fd8065c6)arg1 size:(id)arg2 name:(long long)arg3 useCount: /* Error: Ran out of types for this method. */;
@property(readonly, nonatomic) id <MTLTexture> textureTarget;
- (void)endFrameWaitingUntilCompleted:(BOOL)arg1;
- (void)beginFrame:(id)arg1;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *resourceQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_group> *resourceGroup;
- (struct __C3DEngineStats *)stats;
- (void)_clearUnusedBindingPoints;
@property(readonly, nonatomic) SCNMetalResourceManager *resourceManager;
- (BOOL)isOpaque;
- (void)setIsOpaque:(BOOL)arg1;
- (BOOL)disableLinearRendering;
- (void)setDisableLinearRendering:(BOOL)arg1;
- (long long)pendingGPUFrameCount;
- (BOOL)wantsWideGamut;
- (void)setWantsWideGamut:(BOOL)arg1;
- (BOOL)supportsFeatureSet:(unsigned long long)arg1;
- (int)profile;
- (unsigned int)features;
@property(readonly, nonatomic) void *frameConstantBufferPool;
@property(retain, nonatomic) id <MTLCommandQueue> commandQueue;
@property(readonly, nonatomic) struct __C3DEngineContext *engineContext;
@property(readonly, nonatomic) id <MTLDevice> device;
- (void)dealloc;
- (id)initWithDevice:(id)arg1 engineContext:(struct __C3DEngineContext *)arg2;
- (void)_reduceStatsOfConstantBuffer:(id)arg1;
-     // Error parsing type: ^{__C3DFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__C3DFXTechnique}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__C3DFXProgram}^{__C3DMaterial}^{__C3DBlendStates}^{__C3DRasterizerStates}{C3DColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__C3DRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[4{?=CCCb1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}^{?}I^{__C3DNode}^{__C3DNode}^{__CFArray}^{__C3DNode}^{__CFString}^{__CFString}^{__CFString}^^{__C3DFXPassInput}qq^{__CFDictionary}^{__CFDictionary}}32@0:8@16@24, name: _createPassWithVertex:fragment:

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

